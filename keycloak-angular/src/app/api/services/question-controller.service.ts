/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteMethodName } from '../fn/question-controller/delete-method-name';
import { DeleteMethodName$Params } from '../fn/question-controller/delete-method-name';
import { get } from '../fn/question-controller/get';
import { Get$Params } from '../fn/question-controller/get';
import { post } from '../fn/question-controller/post';
import { Post$Params } from '../fn/question-controller/post';
import { putMethodName } from '../fn/question-controller/put-method-name';
import { PutMethodName$Params } from '../fn/question-controller/put-method-name';
import { Question } from '../models/question';

@Injectable({ providedIn: 'root' })
export class QuestionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `putMethodName()` */
  static readonly PutMethodNamePath = '/question';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putMethodName()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putMethodName$Response(params: PutMethodName$Params, context?: HttpContext): Observable<StrictHttpResponse<Question>> {
    return putMethodName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putMethodName$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putMethodName(params: PutMethodName$Params, context?: HttpContext): Observable<Question> {
    return this.putMethodName$Response(params, context).pipe(
      map((r: StrictHttpResponse<Question>): Question => r.body)
    );
  }

  /** Path part for operation `post()` */
  static readonly PostPath = '/question';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `post()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  post$Response(params: Post$Params, context?: HttpContext): Observable<StrictHttpResponse<Question>> {
    return post(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `post$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  post(params: Post$Params, context?: HttpContext): Observable<Question> {
    return this.post$Response(params, context).pipe(
      map((r: StrictHttpResponse<Question>): Question => r.body)
    );
  }

  /** Path part for operation `get()` */
  static readonly GetPath = '/question/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `get()` instead.
   *
   * This method doesn't expect any request body.
   */
  get$Response(params: Get$Params, context?: HttpContext): Observable<StrictHttpResponse<Question>> {
    return get(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `get$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  get(params: Get$Params, context?: HttpContext): Observable<Question> {
    return this.get$Response(params, context).pipe(
      map((r: StrictHttpResponse<Question>): Question => r.body)
    );
  }

  /** Path part for operation `deleteMethodName()` */
  static readonly DeleteMethodNamePath = '/question/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMethodName()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMethodName$Response(params: DeleteMethodName$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return deleteMethodName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMethodName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMethodName(params: DeleteMethodName$Params, context?: HttpContext): Observable<boolean> {
    return this.deleteMethodName$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
