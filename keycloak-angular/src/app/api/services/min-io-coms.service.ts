/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createBucket } from '../fn/min-io-coms/create-bucket';
import { CreateBucket$Params } from '../fn/min-io-coms/create-bucket';
import { deleteAllEntity } from '../fn/min-io-coms/delete-all-entity';
import { DeleteAllEntity$Params } from '../fn/min-io-coms/delete-all-entity';
import { deleteAllFiles } from '../fn/min-io-coms/delete-all-files';
import { DeleteAllFiles$Params } from '../fn/min-io-coms/delete-all-files';
import { deleteBucket } from '../fn/min-io-coms/delete-bucket';
import { DeleteBucket$Params } from '../fn/min-io-coms/delete-bucket';
import { deleteFile } from '../fn/min-io-coms/delete-file';
import { DeleteFile$Params } from '../fn/min-io-coms/delete-file';
import { getBuckets } from '../fn/min-io-coms/get-buckets';
import { GetBuckets$Params } from '../fn/min-io-coms/get-buckets';
import { getFileUrl } from '../fn/min-io-coms/get-file-url';
import { GetFileUrl$Params } from '../fn/min-io-coms/get-file-url';
import { getMyProfilePicture } from '../fn/min-io-coms/get-my-profile-picture';
import { GetMyProfilePicture$Params } from '../fn/min-io-coms/get-my-profile-picture';
import { getPegarObjetoViaEtag } from '../fn/min-io-coms/get-pegar-objeto-via-etag';
import { GetPegarObjetoViaEtag$Params } from '../fn/min-io-coms/get-pegar-objeto-via-etag';
import { MinIoFileNameAnswer } from '../models/min-io-file-name-answer';
import { MinIoFileUrl } from '../models/min-io-file-url';
import { postFilesForQuestions } from '../fn/min-io-coms/post-files-for-questions';
import { PostFilesForQuestions$Params } from '../fn/min-io-coms/post-files-for-questions';
import { postMethodName } from '../fn/min-io-coms/post-method-name';
import { PostMethodName$Params } from '../fn/min-io-coms/post-method-name';
import { postMyProfilePicture } from '../fn/min-io-coms/post-my-profile-picture';
import { PostMyProfilePicture$Params } from '../fn/min-io-coms/post-my-profile-picture';
import { putMethodName1 } from '../fn/min-io-coms/put-method-name-1';
import { PutMethodName1$Params } from '../fn/min-io-coms/put-method-name-1';
import { uploadFile } from '../fn/min-io-coms/upload-file';
import { UploadFile$Params } from '../fn/min-io-coms/upload-file';

@Injectable({ providedIn: 'root' })
export class MinIoComsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `putMethodName1()` */
  static readonly PutMethodName1Path = '/files/professor/{fileName}';

  /**
   * envia um arquivo do bucket temporario para um bucket eterno com o nome do id do usuário.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putMethodName1()` instead.
   *
   * This method doesn't expect any request body.
   */
  putMethodName1$Response(params: PutMethodName1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return putMethodName1(this.http, this.rootUrl, params, context);
  }

  /**
   * envia um arquivo do bucket temporario para um bucket eterno com o nome do id do usuário.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putMethodName1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  putMethodName1(params: PutMethodName1$Params, context?: HttpContext): Observable<string> {
    return this.putMethodName1$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `createBucket()` */
  static readonly CreateBucketPath = '/files/{bucketName}';

  /**
   * cria um bucket com base no nome entregue.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBucket()` instead.
   *
   * This method doesn't expect any request body.
   */
  createBucket$Response(params: CreateBucket$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createBucket(this.http, this.rootUrl, params, context);
  }

  /**
   * cria um bucket com base no nome entregue.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBucket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createBucket(params: CreateBucket$Params, context?: HttpContext): Observable<void> {
    return this.createBucket$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `uploadFile()` */
  static readonly UploadFilePath = '/files/{bucketName}/{fileName}';

  /**
   * envia um arquivo para o minio com base no nome do bucket e do arquivo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadFile()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile$Response(params: UploadFile$Params, context?: HttpContext): Observable<StrictHttpResponse<MinIoFileNameAnswer>> {
    return uploadFile(this.http, this.rootUrl, params, context);
  }

  /**
   * envia um arquivo para o minio com base no nome do bucket e do arquivo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadFile$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadFile(params: UploadFile$Params, context?: HttpContext): Observable<MinIoFileNameAnswer> {
    return this.uploadFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<MinIoFileNameAnswer>): MinIoFileNameAnswer => r.body)
    );
  }

  /** Path part for operation `postMethodName()` */
  static readonly PostMethodNamePath = '/files/temp';

  /**
   * envia um arquivo para o minio no bucket temp.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postMethodName()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMethodName$Response(params?: PostMethodName$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return postMethodName(this.http, this.rootUrl, params, context);
  }

  /**
   * envia um arquivo para o minio no bucket temp.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postMethodName$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMethodName(params?: PostMethodName$Params, context?: HttpContext): Observable<{
}> {
    return this.postMethodName$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `postFilesForQuestions()` */
  static readonly PostFilesForQuestionsPath = '/files/professor';

  /**
   * envia um arquivo para o minio em um bucket temporario com o nome do id do usuário.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postFilesForQuestions()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postFilesForQuestions$Response(params?: PostFilesForQuestions$Params, context?: HttpContext): Observable<StrictHttpResponse<MinIoFileNameAnswer>> {
    return postFilesForQuestions(this.http, this.rootUrl, params, context);
  }

  /**
   * envia um arquivo para o minio em um bucket temporario com o nome do id do usuário.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postFilesForQuestions$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postFilesForQuestions(params?: PostFilesForQuestions$Params, context?: HttpContext): Observable<MinIoFileNameAnswer> {
    return this.postFilesForQuestions$Response(params, context).pipe(
      map((r: StrictHttpResponse<MinIoFileNameAnswer>): MinIoFileNameAnswer => r.body)
    );
  }

  /** Path part for operation `getMyProfilePicture()` */
  static readonly GetMyProfilePicturePath = '/files/pfp';

  /**
   * pega o url da imagem de perfil do usuário.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyProfilePicture()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyProfilePicture$Response(params?: GetMyProfilePicture$Params, context?: HttpContext): Observable<StrictHttpResponse<MinIoFileUrl>> {
    return getMyProfilePicture(this.http, this.rootUrl, params, context);
  }

  /**
   * pega o url da imagem de perfil do usuário.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyProfilePicture$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyProfilePicture(params?: GetMyProfilePicture$Params, context?: HttpContext): Observable<MinIoFileUrl> {
    return this.getMyProfilePicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<MinIoFileUrl>): MinIoFileUrl => r.body)
    );
  }

  /** Path part for operation `postMyProfilePicture()` */
  static readonly PostMyProfilePicturePath = '/files/pfp';

  /**
   * envia uma imagem de perfil para o minio.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postMyProfilePicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMyProfilePicture$Response(params?: PostMyProfilePicture$Params, context?: HttpContext): Observable<StrictHttpResponse<MinIoFileUrl>> {
    return postMyProfilePicture(this.http, this.rootUrl, params, context);
  }

  /**
   * envia uma imagem de perfil para o minio.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postMyProfilePicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  postMyProfilePicture(params?: PostMyProfilePicture$Params, context?: HttpContext): Observable<MinIoFileUrl> {
    return this.postMyProfilePicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<MinIoFileUrl>): MinIoFileUrl => r.body)
    );
  }

  /** Path part for operation `getBuckets()` */
  static readonly GetBucketsPath = '/files';

  /**
   * pega o nome de todos os buckets.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBuckets()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBuckets$Response(params?: GetBuckets$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getBuckets(this.http, this.rootUrl, params, context);
  }

  /**
   * pega o nome de todos os buckets.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBuckets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBuckets(params?: GetBuckets$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getBuckets$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getFileUrl()` */
  static readonly GetFileUrlPath = '/files/{bucketName}/{objectName}';

  /**
   * pega o url de um arquivo com base no nome do bucket e do arquivo.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFileUrl()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFileUrl$Response(params: GetFileUrl$Params, context?: HttpContext): Observable<StrictHttpResponse<MinIoFileUrl>> {
    return getFileUrl(this.http, this.rootUrl, params, context);
  }

  /**
   * pega o url de um arquivo com base no nome do bucket e do arquivo.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFileUrl$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFileUrl(params: GetFileUrl$Params, context?: HttpContext): Observable<MinIoFileUrl> {
    return this.getFileUrl$Response(params, context).pipe(
      map((r: StrictHttpResponse<MinIoFileUrl>): MinIoFileUrl => r.body)
    );
  }

  /** Path part for operation `getPegarObjetoViaEtag()` */
  static readonly GetPegarObjetoViaEtagPath = '/files/etag/{etag}';

  /**
   * pega o url de um arquivo que está no bucket temp com base no etag.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPegarObjetoViaEtag()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPegarObjetoViaEtag$Response(params: GetPegarObjetoViaEtag$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getPegarObjetoViaEtag(this.http, this.rootUrl, params, context);
  }

  /**
   * pega o url de um arquivo que está no bucket temp com base no etag.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPegarObjetoViaEtag$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPegarObjetoViaEtag(params: GetPegarObjetoViaEtag$Params, context?: HttpContext): Observable<{
}> {
    return this.getPegarObjetoViaEtag$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteAllFiles()` */
  static readonly DeleteAllFilesPath = '/files/professor/';

  /**
   * deleta todos os arquivos do bucket temporario com o id do usuário.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllFiles()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllFiles$Response(params?: DeleteAllFiles$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteAllFiles(this.http, this.rootUrl, params, context);
  }

  /**
   * deleta todos os arquivos do bucket temporario com o id do usuário.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllFiles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllFiles(params?: DeleteAllFiles$Params, context?: HttpContext): Observable<string> {
    return this.deleteAllFiles$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `deleteAllEntity()` */
  static readonly DeleteAllEntityPath = '/files/delete';

  /**
   * deleta todos os arquivos do bucket temp.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAllEntity()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllEntity$Response(params?: DeleteAllEntity$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteAllEntity(this.http, this.rootUrl, params, context);
  }

  /**
   * deleta todos os arquivos do bucket temp.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAllEntity$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAllEntity(params?: DeleteAllEntity$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteAllEntity$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteBucket()` */
  static readonly DeleteBucketPath = '/files/delete/{bucketName}';

  /**
   * deleta um bucket com base no nome do bucket.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteBucket()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBucket$Response(params: DeleteBucket$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteBucket(this.http, this.rootUrl, params, context);
  }

  /**
   * deleta um bucket com base no nome do bucket.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteBucket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteBucket(params: DeleteBucket$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteBucket$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `deleteFile()` */
  static readonly DeleteFilePath = '/files/delete/{bucketName}/{etag}';

  /**
   * deleta um arquivo com base no nome do bucket e do etag.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFile$Response(params: DeleteFile$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return deleteFile(this.http, this.rootUrl, params, context);
  }

  /**
   * deleta um arquivo com base no nome do bucket e do etag.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFile(params: DeleteFile$Params, context?: HttpContext): Observable<{
}> {
    return this.deleteFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
