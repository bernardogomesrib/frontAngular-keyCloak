/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAutenticado } from '../fn/testes-authenticado/get-autenticado';
import { GetAutenticado$Params } from '../fn/testes-authenticado/get-autenticado';
import { getAutenticado2 } from '../fn/testes-authenticado/get-autenticado-2';
import { GetAutenticado2$Params } from '../fn/testes-authenticado/get-autenticado-2';
import { getAutenticado3 } from '../fn/testes-authenticado/get-autenticado-3';
import { GetAutenticado3$Params } from '../fn/testes-authenticado/get-autenticado-3';

@Injectable({ providedIn: 'root' })
export class TestesAuthenticadoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAutenticado()` */
  static readonly GetAutenticadoPath = '/testes/authenticado';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAutenticado()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAutenticado$Response(params?: GetAutenticado$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
};
}>> {
    return getAutenticado(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAutenticado$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAutenticado(params?: GetAutenticado$Params, context?: HttpContext): Observable<{
[key: string]: {
};
}> {
    return this.getAutenticado$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
};
}>): {
[key: string]: {
};
} => r.body)
    );
  }

  /** Path part for operation `getAutenticado3()` */
  static readonly GetAutenticado3Path = '/testes/authenticado/teste/3';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAutenticado3()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAutenticado3$Response(params?: GetAutenticado3$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAutenticado3(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAutenticado3$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAutenticado3(params?: GetAutenticado3$Params, context?: HttpContext): Observable<{
}> {
    return this.getAutenticado3$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAutenticado2()` */
  static readonly GetAutenticado2Path = '/testes/authenticado/teste/2';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAutenticado2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAutenticado2$Response(params?: GetAutenticado2$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAutenticado2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAutenticado2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAutenticado2(params?: GetAutenticado2$Params, context?: HttpContext): Observable<{
}> {
    return this.getAutenticado2$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
