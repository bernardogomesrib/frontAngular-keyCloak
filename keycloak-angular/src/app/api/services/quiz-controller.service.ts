/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createQuiz } from '../fn/quiz-controller/create-quiz';
import { CreateQuiz$Params } from '../fn/quiz-controller/create-quiz';
import { deleteQuiz } from '../fn/quiz-controller/delete-quiz';
import { DeleteQuiz$Params } from '../fn/quiz-controller/delete-quiz';
import { getQuiz } from '../fn/quiz-controller/get-quiz';
import { GetQuiz$Params } from '../fn/quiz-controller/get-quiz';
import { Quiz } from '../models/quiz';
import { updateQuiz } from '../fn/quiz-controller/update-quiz';
import { UpdateQuiz$Params } from '../fn/quiz-controller/update-quiz';

@Injectable({ providedIn: 'root' })
export class QuizControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateQuiz()` */
  static readonly UpdateQuizPath = '/quiz';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateQuiz()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuiz$Response(params: UpdateQuiz$Params, context?: HttpContext): Observable<StrictHttpResponse<Quiz>> {
    return updateQuiz(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateQuiz$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuiz(params: UpdateQuiz$Params, context?: HttpContext): Observable<Quiz> {
    return this.updateQuiz$Response(params, context).pipe(
      map((r: StrictHttpResponse<Quiz>): Quiz => r.body)
    );
  }

  /** Path part for operation `createQuiz()` */
  static readonly CreateQuizPath = '/quiz';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createQuiz()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuiz$Response(params: CreateQuiz$Params, context?: HttpContext): Observable<StrictHttpResponse<Quiz>> {
    return createQuiz(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createQuiz$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuiz(params: CreateQuiz$Params, context?: HttpContext): Observable<Quiz> {
    return this.createQuiz$Response(params, context).pipe(
      map((r: StrictHttpResponse<Quiz>): Quiz => r.body)
    );
  }

  /** Path part for operation `getQuiz()` */
  static readonly GetQuizPath = '/quiz/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getQuiz()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuiz$Response(params: GetQuiz$Params, context?: HttpContext): Observable<StrictHttpResponse<Quiz>> {
    return getQuiz(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getQuiz$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuiz(params: GetQuiz$Params, context?: HttpContext): Observable<Quiz> {
    return this.getQuiz$Response(params, context).pipe(
      map((r: StrictHttpResponse<Quiz>): Quiz => r.body)
    );
  }

  /** Path part for operation `deleteQuiz()` */
  static readonly DeleteQuizPath = '/quiz/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteQuiz()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuiz$Response(params: DeleteQuiz$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteQuiz(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteQuiz$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuiz(params: DeleteQuiz$Params, context?: HttpContext): Observable<void> {
    return this.deleteQuiz$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
