/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createAccount } from '../fn/auth-controller/create-account';
import { CreateAccount$Params } from '../fn/auth-controller/create-account';
import { postLogin } from '../fn/auth-controller/post-login';
import { PostLogin$Params } from '../fn/auth-controller/post-login';
import { postLogout } from '../fn/auth-controller/post-logout';
import { PostLogout$Params } from '../fn/auth-controller/post-logout';
import { updateToken } from '../fn/auth-controller/update-token';
import { UpdateToken$Params } from '../fn/auth-controller/update-token';

@Injectable({ providedIn: 'root' })
export class AuthControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateToken()` */
  static readonly UpdateTokenPath = '/auth/update';

  /**
   * EndPoint para atualizar o token.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateToken()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateToken$Response(params: UpdateToken$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateToken(this.http, this.rootUrl, params, context);
  }

  /**
   * EndPoint para atualizar o token.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateToken$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateToken(params: UpdateToken$Params, context?: HttpContext): Observable<{
}> {
    return this.updateToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `postLogin()` */
  static readonly PostLoginPath = '/auth/login';

  /**
   * EndPoint para fazer login na api.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postLogin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postLogin$Response(params: PostLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return postLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * EndPoint para fazer login na api.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postLogin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postLogin(params: PostLogin$Params, context?: HttpContext): Observable<{
}> {
    return this.postLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createAccount()` */
  static readonly CreateAccountPath = '/auth/create';

  /**
   * EndPoint para criar uma conta na api.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount$Response(params: CreateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * EndPoint para criar uma conta na api.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount(params: CreateAccount$Params, context?: HttpContext): Observable<{
}> {
    return this.createAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `postLogout()` */
  static readonly PostLogoutPath = '/auth/logout';

  /**
   * EndPoint para fazer logout.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postLogout()` instead.
   *
   * This method doesn't expect any request body.
   */
  postLogout$Response(params: PostLogout$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return postLogout(this.http, this.rootUrl, params, context);
  }

  /**
   * EndPoint para fazer logout.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postLogout$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  postLogout(params: PostLogout$Params, context?: HttpContext): Observable<{
}> {
    return this.postLogout$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
